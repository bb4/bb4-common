// Copyright by Barry G Becker, 2013 - 2021. Licensed under MIT License: http://www.opensource.org/licenses/MIT
// @author Barry G Becker

buildscript {
    repositories {
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        mavenCentral()
    }
    dependencies {
        classpath 'com.barrybecker4:bb4-gradle:1.7-SNAPSHOT'
        classpath 'com.guardsquare:proguard-gradle:7.1.1'  // The ProGuard Gradle plugin.
    }
}

// May be able to move this plugins block to bb4.gradle after move to gradle 8 or higher
// See https://docs.gradle.org/5.0/userguide/plugins.html#sec:plugins_block
//     https://plugins.gradle.org/plugin/com.github.maiflai.scalatest
plugins {
    id "com.github.maiflai.scalatest" version "0.31" // needed to run scala tests
}

defaultTasks 'build'

description = 'A library project containing bb4 common code'
group = 'com.barrybecker4'
project.version = '1.7-SNAPSHOT'
ext {
    archivesBaseName = 'bb4-common'
    mainClass = 'com.barrybecker4.common.app.AppContext'
}


task ('proguard', type: proguard.gradle.ProGuardTask) {
    configuration 'proguard-project.txt'
/*
    verbose

    // Specify the input jars, output jars, and library jars.

    injars 'build/libs/bb4-common-1.7-SNAPSHOT.jar'
    //injars  '/usr/local/java/scala-2.9.1/lib/scala-library.jar'
    //injars  '/usr/local/java/scala-2.9.1/lib/scala-compiler.jar', filter: '!META-INF/MANIFEST.MF'
    //injars  '/usr/local/java/scala-2.9.1/lib/jline.jar', filter: '!META-INF/MANIFEST.MF'
    outjars 'build/libs/bb4-common-1.7-SNAPSHOT-p.jar'

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }


    // Ignore some compiler artefacts.

    dontwarn 'scala.**'
    dontwarn 'com.barrybecker4.common.**'

    // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.

    printmapping 'out.map'
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile,LineNumberTable'

    // Preserve all annotations.
    keepattributes '*Annotation*'

    // Preserve all public applications.
    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'

    keepclassmembers 'class * { \
        ** MODULE$; \
    }'

    keepclassmembernames 'class scala.concurrent.forkjoin.ForkJoinWorkerThread { \
        int base; \
        int sp; \
        int runState; \
    }'

    keepclassmembernames 'class scala.concurrent.forkjoin.ForkJoinTask { \
        int status; \
    }'

    // Preserve all native method names and the names of their classes.

    keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.

    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // You can comment this out if your application doesn't use serialization.
    // If your code contains serializable classes that have to be backward
    // compatible, please refer to the manual.

    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'
*/
}

apply from: project.buildscript.classLoader.getResource('bb4.gradle').toURI()
apply from: project.buildscript.classLoader.getResource('bb4-publish.gradle').toURI()
apply from: project.buildscript.classLoader.getResource('bb4-deploy.gradle').toURI()
